---
title: Using Aerospike EE OnDemand Service for PCF
owner: Partners
---

##<a id='using'></a> Using Aerospike EE OnDemand Service for PCF

After installing and configuring the Aerospike EE OnDemand Serice for PCF tile, developers can create service instances of Aerospike service plans and bind them to their applications using the cf CLI. Binding an Aerospike service instance to an application provides the application with information it can use to store and retrieve information in an Aerospike database. 

When creating an Aerospike service instance, the tile will also create an Aerospike Management Console that can be used to monitor the health and activity on the Aerospike cluster.

##<a id='cf-cli'></a>Create and Bind a Service Instance Using the cf CLI

To create an Aerospike service instance using the cf CLI, perform the following steps:

1. Set your API endpoint to the Cloud Controller of your deployment.
    <pre class="terminal">
    $ cf api api.YOUR-SYSTEM-DOMAIN
    Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
    OK
    API endpoint:  <span>https</span>://api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
    Not logged in. Use 'cf login' to log in.
    </pre>

1. Log in to your deployment and select an org and a space.
    <pre class="terminal">
    $ cf login
    API endpoint: <span>https</span>://api.YOUR-SYSTEM-DOMAIN
    Email> user<span>@</span>example.com
    Password>
    </pre>
    
1. List the Marketplace services and locate the Aerospike service. The service plans match the namespaces that have been configured on the Aerospike database.
    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org system / space apps-manager as admin...
    OK

    service                 plans                    description
    aerospike-on-demand     small, medium, large     An enterprise-class NoSQL database providing speed at scale

    TIP:  Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service.
    </pre>

1. Create an instance of the Aerospike service, specifying both the name of the service plan and the name of the service instance. We are using the **small** plan for this example.
    <pre class="terminal">
    $ cf create-service aerospike-on-demand small YOUR-SERVICE-INSTANCE
    </pre>

1. Bind the instance to an application, adding a parameter with name `setname` and set the value to the name of the set in the Aerospike database that this application should use to store its data. 
    <pre class="terminal">
    $ cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
    Binding service YOUR-SERVICE-INSTANCE to app YOUR-APP in org example / space development as user@example.com...
    OK
    TIP: Use 'cf restage YOUR-APP' to ensure your env variable changes take effect
    </pre>

1. Restage the application for the binding to take effect.
    <pre class="terminal">
    $ cf restage YOUR-APP
    </pre>

The application now has all the credentials required to connect to the Aerospike database in the VCAP_SERVICES environment variable.

##<a id='amc'></a>Connect to the Aerospike Management Console (AMC) for the cluster

After following the steps above to create an Aerospike service and binding the service to an application, inspect the environment of the application to get the URL and credentials for the Aerospike Management Console:
    <pre class="terminal">
    $ cf env YOUR-APP
	Getting env variables for app YOUR-APP in org aerospike-service-broker-org / space YOUR-SPACE as admin...
	OK
	System-Provided:
	{
	 "VCAP_SERVICES": {
	  "aerospike-on-demand": [
	   {
	    "credentials": {
	     "aerospike\_amc\_ips": [
	      "10.65.179.212"
	     ],
	     "aerospike_server_ips": [
	      "10.65.179.211"
	     ],
	     "amc\_address": "https://aerospike-amc-56a0096b-e8d0-446b-bed9-3a41b306f53d.cfapps-02.haas-26.pez.pivotal.io",
	     "hostname": "10.65.179.211",
	     "namespace": "as_datastore",
	     "password": "WitNXHL69Voddhe7EtwD",
	     "port": 3000,
	     "service_type": "small",
	     "user": "admin"
	    },
	    ...
    </pre>

1. Use the **amc_address** URL from the VCAP_SERVICES to connect to AMC.

1. You will be prompted for a hostname for one of the nodes of the cluster. 
    <br><%= image_tag('amc-login-1.png') %>

1. Use the **hostname** IP address from the VCAP_SERVICES.
    <br><%= image_tag('amc-login-2.png') %>

1. You will then be prompted for the user and password. Use the **user** and **password** from the VCAP_SERVICES.
    <br><%= image_tag('amc-login-3.png') %>

1. You should now be connected to the Aerospike Management Console.
    <br><%= image_tag('amc.png') %>

##<a id='parameters'></a>Arbitrary Parameters

The Aerospike EE OnDemand Service for PCF supports a number of arbitrary parameters that can be used to customize the service either during creation via **cf create-service** or updating via **cf update-service**.

###<a id='service'></a>Aerospike Service Parameters
These parameters can be used to customize the Aerospike service instance. If specified, these parameters will take precedence over the defaults set up for the plan.

+ **server\_instances**  : Number of nodes in the cluster.
+ **server\_vm\_type** : VM type to use for each of the cluster nodes, i.e. "large.mem".
+ **server\_persistent\_disk\_type** : Type of disk to use on each of the cluster nodes.

###<a id='namespace'></a>Aerospike Namespace Parameters
These parameters can be used to customize the namespace configured on the Aerospike service instance. If specified, these parameters will take precedence over the defaults set up for the plan.

+ **namespace\_name** : Name to use for the namespace.
+ **namespace\_size** : Memory-size to use for the namespace. see [configuration documentation](http://www.aerospike.com/docs/reference/configuration#memory-size)
+ **namespace\_storage\_type** : Storage type to use for the namespace (**Device** or **Memory**).
+ **namespace\_replication\_factor** : Number of copies of a record to be maintained in the cluster.
+ **namespace\_default\_ttl** : Default time-to-live (in seconds) for a record from the time of creation or last update.
+ **namespace\_filesize** : Maximum size for each file storage defined in this namespace.
+ **namespace\_data\_in\_memory** : Boolean. If **true**, always keep a copy of all data in memory.

###<a id='service'></a>AMC Parameter
This parameter can be used to customize the Aerospike Management Console for the service

+ **amc\_route** : Route to use when configuring the AMC service. If not specified, a default route will be provided.

###<a id='examples'></a>Examples

Arbitrary parameters are passed via a valid JSON object containing the desired parameters. These can either be provided in-line or in a file.

Here are some examples:

1. Create a service called **small_cache** which uses the **small** plan template, but uses **as_cache** for the name of the namespace.

    <pre class="terminal">
    cf create-service aerospike-on-demand small small_cache -c '{"namespace_name":"as_cache"}'
    </pre>

1. Update an existing service and modify the number of nodes in the cluster.

    <pre class="terminal">
    cf update-service small_cache -c '{"server_instances":4}'
    </pre>

1. Update an existing service using a JSON file with the parameters:

    <pre class="terminal">
    cf update-service small_cache -c /tmp/config.json
    </pre>

**NOTE:** If one or more arbitrary parameters are used to create or update a service, you will need to include those parameters with each update of the service otherwise the default values from the plan will be used instead.

